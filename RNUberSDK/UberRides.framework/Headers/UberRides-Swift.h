// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
@import CoreGraphics;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSDate;
@class UBSDKRidesScope;
@class NSCoder;


/// Stores information about an access token used for authorizing requests.
SWIFT_CLASS_NAMED("AccessToken")
@interface UBSDKAccessToken : NSObject <NSCoding>

/// String containing the bearer token.
@property (nonatomic, readonly, copy) NSString * _Nullable tokenString;

/// String containing the refresh token.
@property (nonatomic, readonly, copy) NSString * _Nullable refreshToken;

/// The expiration date for this access token
@property (nonatomic, readonly, strong) NSDate * _Nullable expirationDate;

/// The scopes this token is valid for
@property (nonatomic, readonly, copy) NSArray<UBSDKRidesScope *> * _Nullable grantedScopes;

/// Initializes an AccessToken with the provided tokenString
///
/// \param tokenString The tokenString to use for this AccessToken
///
/// \returns  an initialized AccessToken object
- (nonnull instancetype)initWithTokenString:(NSString * _Nonnull)tokenString OBJC_DESIGNATED_INITIALIZER;

/// Initializer to build an accessToken from the provided NSCoder. Allows for serialization of an AccessToken
///
/// \param decoder The NSCoder to decode the AcccessToken from
///
/// \returns  An initialized AccessToken, or nil if something went wrong
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;

/// Encodes the AccessToken. Required to allow for serialization
///
/// \param coder The NSCoder to encode the access token on
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end



/// Factory class to build access tokens
SWIFT_CLASS_NAMED("AccessTokenFactory")
@interface UBSDKAccessTokenFactory : NSObject
+ (UBSDKAccessToken * _Nullable)createAccessTokenFromJSONString:(NSString * _Nonnull)string;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLQueryItem;
@class NSURL;
@class NSError;


/// Protocol for defining a deeplink that can be executed to open an external app
SWIFT_PROTOCOL_NAMED("Deeplinking")
@protocol UBSDKDeeplinking

/// The deeplink scheme to use, where a deeplink takes the form scheme://domain/path?query
@property (nonatomic, readonly, copy) NSString * _Nonnull scheme;

/// The domain of the deeplink, where a deeplink takes the form scheme://domain/path?query
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;

/// The path of the deeplink, where a deeplink takes the form scheme://domain/path?query
@property (nonatomic, readonly, copy) NSString * _Nullable path;

/// The query parameter items for the deeplink, where a deeplink takes the form scheme://domain/path?query
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nullable queryItems;

/// The deeplink URL that the deeplink will execute
@property (nonatomic, readonly, strong) NSURL * _Nonnull deeplinkURL;
- (void)execute:(void (^ _Nullable)(NSError * _Nullable))completion;
@end



/// A Deeplinking object for authenticating a user via the native Uber app
SWIFT_CLASS_NAMED("BaseDeeplink")
@interface UBSDKBaseDeeplink : NSObject <UBSDKDeeplinking>

/// The scheme for the auth deeplink
@property (nonatomic, copy) NSString * _Nonnull scheme;

/// The domain for the auth deeplink
@property (nonatomic, copy) NSString * _Nonnull domain;

/// The path for the auth deeplink
@property (nonatomic, copy) NSString * _Nullable path;

/// The array of query items the deeplink will include
@property (nonatomic, copy) NSArray<NSURLQueryItem *> * _Nullable queryItems;
@property (nonatomic, readonly, strong) NSURL * _Nonnull deeplinkURL;
- (nullable instancetype)initWithScheme:(NSString * _Nonnull)scheme domain:(NSString * _Nonnull)domain path:(NSString * _Nullable)path queryItems:(NSArray<NSURLQueryItem *> * _Nullable)queryItems OBJC_DESIGNATED_INITIALIZER;

/// Executes the base deeplink, accounting for the possiblity of an alert appearing on iOS 9+
///
/// \param completion The completion block to execute once the deeplink has
/// executed. Passes in True if the url was successfully opened, false otherwise.
- (void)execute:(void (^ _Nullable)(NSError * _Nullable))completion;
@end



/// A Deeplinking object for authenticating a user via the native Uber app
SWIFT_CLASS_NAMED("AppStoreDeeplink")
@interface UBSDKAppStoreDeeplink : UBSDKBaseDeeplink

/// Initializes an App Store Deeplink to bring the user to the appstore
///
/// \returns  An initialized AppStoreDeeplink
- (nonnull instancetype)initWithUserAgent:(NSString * _Nullable)userAgent OBJC_DESIGNATED_INITIALIZER;
@end



/// A Deeplinking object for authenticating a user via the native Uber app
SWIFT_CLASS_NAMED("AuthenticationDeeplink")
@interface UBSDKAuthenticationDeeplink : UBSDKBaseDeeplink

/// Initializes an Authentication Deeplink to request the provided scopes
///
/// \param scopes An array of RidesScopes you would like to request
///
/// \returns  An initialized AuthenticationDeeplink
- (nonnull instancetype)initWithScopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes OBJC_DESIGNATED_INITIALIZER;
@end

enum CallbackURIType : NSInteger;


/// Base class for authorization flows that use the LoginView.
SWIFT_CLASS_NAMED("BaseAuthenticator")
@interface UBSDKBaseAuthenticator : NSObject

/// Optional identifier for saving the access token in keychain
@property (nonatomic, copy) NSString * _Nullable accessTokenIdentifier;

/// Optional access group for saving the access token in keychain
@property (nonatomic, copy) NSString * _Nullable keychainAccessGroup;

/// Completion block for when login has completed
@property (nonatomic, copy) void (^ _Nullable loginCompletion)(UBSDKAccessToken * _Nullable accessToken, NSError * _Nullable error);

/// Scopes to request during login
@property (nonatomic, copy) NSArray<UBSDKRidesScope *> * _Nonnull scopes;

/// The Callback URL Type to use for this authentication method
@property (nonatomic) enum CallbackURIType callbackURIType;
@end

@class UIViewController;


/// Base class for authorization flows that use the LoginView.
SWIFT_CLASS("_TtC9UberRides22LoginViewAuthenticator")
@interface LoginViewAuthenticator : UBSDKBaseAuthenticator

/// View controller that will present the login
@property (nonatomic, strong) UIViewController * _Nonnull presentingViewController;
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController scopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("AuthorizationCodeGrantAuthenticator")
@interface UBSDKAuthorizationCodeGrantAuthenticator : LoginViewAuthenticator
@property (nonatomic, copy) NSString * _Nullable state;
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController scopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes state:(NSString * _Nullable)state OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController scopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes;
@end




/// An enum to represent the possible callback URI types. Each form of authorization could potentially use a different URI, these are the possible types.
///
/// <ul><li>AuthorizationCode: Callback URI to use for Authorization Code Grant flow</li><li>General:           Callback URI to use for any flow</li><li>Implicit:          Callback URI to use for Implicit Grant flow</li><li>Native:            Callback URI to use for Native (SSO) flow</li></ul>
typedef SWIFT_ENUM(NSInteger, CallbackURIType) {
  CallbackURITypeAuthorizationCode = 0,
  CallbackURITypeGeneral = 1,
  CallbackURITypeImplicit = 2,
  CallbackURITypeNative = 3,
};

@class NSBundle;
enum Region : NSInteger;


/// Class responsible for handling all of the SDK Configuration options. Provides default values for Application-wide configuration properties. All properties are configurable via the respective setter method
SWIFT_CLASS_NAMED("Configuration")
@interface UBSDKConfiguration : NSObject

/// The .plist file to use, default is Info.plist
+ (NSString * _Nonnull)plistName;
+ (void)setPlistName:(NSString * _Nonnull)value;

/// The bundle that contains the .plist file. Default is the mainBundle()
+ (NSBundle * _Nonnull)bundle;
+ (void)setBundle:(NSBundle * _Nonnull)value;

/// The string value of the current region setting
+ (NSString * _Nonnull)regionString;

/// The current version of the SDK as a string
+ (NSString * _Nonnull)sdkVersion;

/// Resets all of the Configuration's values to default
+ (void)restoreDefaults;

/// Gets the client ID of this app. Defaults to the value stored in your Application's plist if not set (UberClientID)
///
/// \returns  The string to use for the Client ID
+ (NSString * _Nonnull)getClientID;

/// Gets the callback URIString of this app. Defaults to the value stored in your Application's plist if not set (UberCallbackURI)
///
/// \returns  The string to use for the Callback URI
+ (NSString * _Nonnull)getCallbackURIString;

/// Gets the callback URIString for the given CallbackURIType. Defaults to the value stored in your Applications' plist (under the UberCallbackURIs key). If the requested type is not defined in your plist, it will attempt to use the .General type. If the .General type is not defined, it will attempt to use the value stored under the UberCallbackURI key. Throws a fatal error if no value can be determined
///
/// \param type The CallbackURIType to get a callback string for
///
/// \returns  The callbackURIString for the the requested type
+ (NSString * _Nonnull)getCallbackURIString:(enum CallbackURIType)type;

/// Gets the display name of this app. Defaults to the value stored in your Appication's plist if not set (UberClientID)
///
/// \returns  The app's name
+ (NSString * _Nonnull)getAppDisplayName;

/// Gets the Server Token of this app. Defaults to the value stored in your Appication's plist if not set (UberServerToken) Optional. Used by the Request Button to get time estimates without requiring login
///
/// \returns  The string Representing your app's server token
+ (NSString * _Nullable)getServerToken;

/// Gets the default keychain access group to save access tokens to. Advanced setting for sharing access tokens between multiple of your apps. Defaults an empty string
///
/// \returns  The default keychain access group to use
+ (NSString * _Nonnull)getDefaultKeychainAccessGroup;

/// Gets the default key to use when saving access tokens to the keychain. Defaults to using "RidesAccessTokenKey"
///
/// \returns  The default access token identifier to use
+ (NSString * _Nonnull)getDefaultAccessTokenIdentifier;

/// Gets the current region the SDK is using. Defaults to Region.Default
///
/// \returns  The Region the SDK is using
+ (enum Region)getRegion;

/// Returns if sandbox is enabled or not
///
/// \returns  true if Sandbox is enabled, false otherwise
+ (BOOL)getSandboxEnabled;

/// Returns if the fallback to use Authorization Code Grant is enabled. If true, a failed SSO attempt will follow up with an attempt to do Authorization Code Grant (if requesting priveleged scopes). If false, the user will be redirected to the app store
///
/// \returns  true if fallback enabled, false otherwise
+ (BOOL)getFallbackEnabled;

/// Sets a string to use as the Client ID. Overwrites the default value provided by the plist. Setting clientID to nil will result in using the default value
///
/// \param clientID The client ID String to use
+ (void)setClientID:(NSString * _Nullable)clientID;

/// Sets a string to use as the Callback URI String. Overwrites the default value provided by the plist. Setting to nil will result in using the default value. If you're setting a custom value, be sure your app is configured to handle deeplinks from this URI & you've added it to the redirect URIs on your Uber developer dashboard
///
/// \param callbackURIString The callback URI String to use
+ (void)setCallbackURIString:(NSString * _Nullable)callbackURIString;

/// Sets a string to use as the Callback URI String for the provided CallbackURIType. Overwrites the default value provided by the plist. Setting to nil will result in using the default value. If you're setting a custom value, be sure your app is configured to handle deeplinks from this URI & you've added it to the redirect URIs on your Uber developer dashboard
///
/// \param callbackURIString The callback URI String to use
///
/// \param type The Callback URI Type to use
+ (void)setCallbackURIString:(NSString * _Nullable)callbackURIString type:(enum CallbackURIType)type;

/// Sets a string to use as the app display name in Uber. Overwrites the default value provided by the plist. Setting to nil will result in using the default value
///
/// \param appDisplayName The display name String to use
+ (void)setAppDisplayName:(NSString * _Nullable)appDisplayName;

/// Sets a string to use as the Server Token. Overwrites the default value provided by the plist. Setting to nil will result in using the default value
///
/// \param serverToken The Server Token String to use
+ (void)setServerToken:(NSString * _Nullable)serverToken;

/// Sets the default keychain access group to use. Access tokens will be saved here by default, unless otherwise specified at the time of login
///
/// \param keychainAccessGroup The client ID String to use
+ (void)setDefaultKeychainAccessGroup:(NSString * _Nullable)keychainAccessGroup;

/// Sets the default key to use when saving access tokens to the keychain. Setting to nil will result in using the default value
///
/// \param accessTokenIdentifier The access token identifier to use
+ (void)setDefaultAccessTokenIdentifier:(NSString * _Nullable)accessTokenIdentifier;

/// Set the region your app is registered in. Used to determine what endpoints to send requests to.
///
/// \param region The region the SDK should use
+ (void)setRegion:(enum Region)region;

/// Enables / Disables Sandbox mode. When the SDK is in sandbox mode, all requests will go to the sandbox environment.
///
/// \param enabled Whether or not sandbox should be enabled
+ (void)setSandboxEnabled:(BOOL)enabled;

/// Enables / Disables the Authorization Code fallback for SSO. If enabled, the SDK will attempt to do Authorization Code Flow if SSO is unavailable. Otherwise, a user will be directed to the appstore
///
/// \param enabled Whether or not fallback should be enabled
+ (void)setFallbackEnabled:(BOOL)enabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UBSDKRideParameters;


/// Protocol for an object that defines how to request a ride. Is expected to be used by any control that can request a ride for a user.
SWIFT_PROTOCOL_NAMED("RideRequesting")
@protocol UBSDKRideRequesting

/// Requests a ride using the provided RideParameters.
///
/// \param rideParameters The RideParameters to use for the ride request
- (void)requestRide:(UBSDKRideParameters * _Nullable)rideParameters;
@end


SWIFT_CLASS_NAMED("DeeplinkRequestingBehavior")
@interface UBSDKDeeplinkRequestingBehavior : NSObject <UBSDKRideRequesting>

/// Requests a ride using a RequestDeeplink that is constructed using the provided rideParameters
///
/// \param rideParameters The RideParameters to use for building and executing
/// the deeplink
- (void)requestRide:(UBSDKRideParameters * _Nullable)rideParameters;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Estimate information on an Uber trip.
SWIFT_CLASS_NAMED("DistanceEstimate")
@interface UBSDKDistanceEstimate : NSObject

/// Expected activity distance.
@property (nonatomic, readonly) double distance;

/// The unit of distance (mile or km).
@property (nonatomic, readonly, copy) NSString * _Nullable distanceUnit;

/// Expected activity duration (in seconds).
@property (nonatomic, readonly) NSInteger duration;
@end


@interface UBSDKDistanceEstimate (SWIFT_EXTENSION(UberRides))
@end



/// Contains information for an Uber driver dispatched for a ride request.
SWIFT_CLASS_NAMED("Driver")
@interface UBSDKDriver : NSObject

/// The first name of the driver.
@property (nonatomic, readonly, copy) NSString * _Nullable name;

/// The URL to the photo of the driver.
@property (nonatomic, readonly, copy) NSString * _Nullable pictureURL;

/// The formatted phone number for contacting the driver.
@property (nonatomic, readonly, copy) NSString * _Nullable phoneNumber;

/// The driver's star rating out of 5 stars.
@property (nonatomic, readonly) double rating;
@end


@interface UBSDKDriver (SWIFT_EXTENSION(UberRides))
@end



/// Defines the implicit grant authorization flow where access token is extracted from redirect fragment.
SWIFT_CLASS_NAMED("ImplicitGrantAuthenticator")
@interface UBSDKImplicitGrantAuthenticator : LoginViewAuthenticator
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController scopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes OBJC_DESIGNATED_INITIALIZER;
@end

enum RequestButtonColorStyle : NSInteger;


/// Base class for Uber buttons that sets up colors and some constraints.
SWIFT_CLASS_NAMED("UberButton")
@interface UBSDKUberButton : UIButton
@property (nonatomic) enum RequestButtonColorStyle colorStyle;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Function responsible for the initial setup of the button. Calls addSubviews(), setContent(), and setConstraints()
- (void)setup;

/// Function responsible for adding all the subviews to the button. Subclasses should override this method and add any necessary subviews.
- (void)addSubviews;

/// Function responsible for updating content on the button. Subclasses should override and do any necessary view setup
- (void)setContent;

/// Function responsible for adding autolayout constriants on the button. Subclasses should override and add any additional autolayout constraints
- (void)setConstraints;
- (CGSize)sizeThatFits:(CGSize)size;
@end

@class UBSDKLoginManager;
enum LoginButtonState : NSInteger;
@protocol UBSDKLoginButtonDelegate;


/// Button to handle logging in to Uber
SWIFT_CLASS_NAMED("LoginButton")
@interface UBSDKLoginButton : UBSDKUberButton

/// The LoginButtonDelegate for this button
@property (nonatomic, weak) id <UBSDKLoginButtonDelegate> _Nullable delegate;

/// The LoginManager to use for log in
@property (nonatomic, strong) UBSDKLoginManager * _Nonnull loginManager;

/// The RidesScopes to request
@property (nonatomic, copy) NSArray<UBSDKRidesScope *> * _Nonnull scopes;

/// The view controller to present login over. Used
@property (nonatomic, strong) UIViewController * _Nullable presentingViewController;

/// The current LoginButtonState of this button (signed in / signed out)
@property (nonatomic, readonly) enum LoginButtonState buttonState;
- (nonnull instancetype)initWithFrame:(CGRect)frame scopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes loginManager:(UBSDKLoginManager * _Nonnull)loginManager OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Setup the LoginButton by adding  a target to the button and setting the login completion block
- (void)setup;

/// Updates the content of the button. Sets the image icon and font, as well as the text
- (void)setContent;

/// Adds the layout constraints for the Login button.
- (void)setConstraints;
- (CGSize)sizeThatFits:(CGSize)size;
- (void)updateConstraints;
@end



/// Protocol to listen to login button events, such as logging in / out
SWIFT_PROTOCOL_NAMED("LoginButtonDelegate")
@protocol UBSDKLoginButtonDelegate

/// The Login Button attempted to log out
///
/// \param button The LoginButton involved
///
/// \param success True if log out succeeded, false otherwise
- (void)loginButton:(UBSDKLoginButton * _Nonnull)button didLogoutWithSuccess:(BOOL)success;

/// THe Login Button completed a login
///
/// \param button The LoginButton involved
///
/// \param accessToken The access token that
///
/// \param error The error that occured
- (void)loginButton:(UBSDKLoginButton * _Nonnull)button didCompleteLoginWithToken:(UBSDKAccessToken * _Nullable)accessToken error:(NSError * _Nullable)error;
@end

typedef SWIFT_ENUM(NSInteger, LoginButtonState) {
  LoginButtonStateSignedIn = 0,
  LoginButtonStateSignedOut = 1,
};

@class UIApplication;

SWIFT_PROTOCOL("_TtP9UberRides13LoginManaging_")
@protocol LoginManaging

/// Function for initializing a login attempt
///
/// \param scopes scopes being requested.
///
/// \param presentingViewController The presenting view controller present the login view controller over.
///
/// \param completion The LoginManagerRequestTokenHandler completion handler for login success/failure.
- (void)loginWithRequestedScopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes presentingViewController:(UIViewController * _Nullable)presentingViewController completion:(void (^ _Nullable)(UBSDKAccessToken * _Nullable accessToken, NSError * _Nullable error))completion;

/// Called via the RidesAppDelegate when the application is opened via a URL. Responsible for parsing the url and creating an OAuthToken.
///
/// \param application The UIApplication object. Pass in the value from the App Delegate
///
/// \param url The URL resource to open. As passed to the corresponding AppDelegate methods
///
/// \param sourceApplication The bundle ID of the app that is requesting your app to open the URL (url).
/// As passed to the corresponding AppDelegate method (iOS 8)
/// OR
/// options[UIApplicationOpenURLOptionsSourceApplicationKey] (iOS 9+)
///
/// \param annotation annotation: A property list object supplied by the source app to communicate
/// information to the receiving app As passed to the corresponding AppDelegate method (iOS 8)
/// OR
/// options[UIApplicationLaunchOptionsAnnotationKey] (iOS 9+)
///
/// \returns  true if the url was meant to be handled by the SDK, false otherwise
- (BOOL)application:(UIApplication * _Nonnull)application openURL:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication annotation:(id _Nullable)annotation;

/// Called via the RidesAppDelegate when the application becomes active. Used to determine if a user abandons Native login without getting an access token.
- (void)applicationDidBecomeActive;
@end

enum UBSDKLoginType : NSInteger;


/// Manages user login via SSO, authorization code grant, or implicit grant.
SWIFT_CLASS_NAMED("LoginManager")
@interface UBSDKLoginManager : NSObject <LoginManaging>

/// Optional state to use for explcit grant authorization
@property (nonatomic, copy) NSString * _Nullable state;

/// Create instance of login manager to authenticate user and retreive access token.
///
/// \param accessTokenIdentifier The access token identifier to use for saving the Access Token, defaults to Configuration.getDefaultAccessTokenIdentifier()
///
/// \param keychainAccessGroup The keychain access group to use for saving the Access Token, defaults to Configuration.getDefaultKeychainAccessGroup()
///
/// \param loginType The login type to use for logging in, defaults to Implicit
///
/// \returns  An initialized LoginManager
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier keychainAccessGroup:(NSString * _Nullable)keychainAccessGroup loginType:(enum UBSDKLoginType)loginType OBJC_DESIGNATED_INITIALIZER;

/// Create instance of login manager to authenticate user and retreive access token. Uses the Implicit Login Behavior
///
/// \param accessTokenIdentifier The access token identifier to use for saving the Access Token, defaults to Configuration.getDefaultAccessTokenIdentifier()
///
/// \param keychainAccessGroup The keychain access group to use for saving the Access Token, defaults to Configuration.getDefaultKeychainAccessGroup()
///
/// \returns  An initialized LoginManager
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier keychainAccessGroup:(NSString * _Nullable)keychainAccessGroup;

/// Create instance of login manager to authenticate user and retreive access token. Uses the Implicit Login Behavior & your Configuration's keychain access group
///
/// \param accessTokenIdentifier The access token identifier to use for saving the Access Token, defaults to Configuration.getDefaultAccessTokenIdentifier()
///
/// \returns  An initialized LoginManager
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier;

/// Create instance of login manager to authenticate user and retreive access token. Uses the provided LoginType, with the accessTokenIdentifier & keychainAccessGroup defined in your Configuration
///
/// \param loginType The login behavior to use for logging in
///
/// \returns  An initialized LoginManager
- (nonnull instancetype)initWithLoginType:(enum UBSDKLoginType)loginType;

/// Create instance of login manager to authenticate user and retreive access token. Uses the Native LoginType, with the accessTokenIdentifier & keychainAccessGroup defined in your Configuration
///
/// \returns  An initialized LoginManager
- (nonnull instancetype)init;

/// Launches view for user to log into Uber account and grant access to requested scopes. Access token (or error) is passed into completion handler.
///
/// \param scopes scopes being requested.
///
/// \param presentingViewController The presenting view controller present the login view controller over.
///
/// \param completion The LoginManagerRequestTokenHandler completion handler for login success/failure.
- (void)loginWithRequestedScopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes presentingViewController:(UIViewController * _Nullable)presentingViewController completion:(void (^ _Nullable)(UBSDKAccessToken * _Nullable accessToken, NSError * _Nullable error))completion;

/// Called via the RidesAppDelegate when the application is opened via a URL. Responsible for parsing the url and creating an OAuthToken.
///
/// \param application The UIApplication object. Pass in the value from the App Delegate
///
/// \param url The URL resource to open. As passed to the corresponding AppDelegate methods
///
/// \param sourceApplication The bundle ID of the app that is requesting your app to open the URL (url).
/// As passed to the corresponding AppDelegate method (iOS 8)
/// OR
/// options[UIApplicationOpenURLOptionsSourceApplicationKey] (iOS 9+)
///
/// \param annotation annotation: A property list object supplied by the source app to communicate
/// information to the receiving app As passed to the corresponding AppDelegate method (iOS 8)
/// OR
/// options[UIApplicationLaunchOptionsAnnotationKey] (iOS 9+)
///
/// \returns  true if the url was meant to be handled by the SDK, false otherwise
- (BOOL)application:(UIApplication * _Nonnull)application openURL:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication annotation:(id _Nullable)annotation;

/// Called via the RidesAppDelegate when the application becomes active. Used to determine if a user abandons Native login without getting an access token.
///
/// \param application The UIApplication object. Pass in the value from the App Delegate
- (void)applicationDidBecomeActive;
@end



/// The type of behaviour that login manager should use for authentication.
///
/// <ul><li>AuthorizationCode: Authorization code grant.</li><li>Implicit: Implicit grant (only valid for general scope endpoints).</li><li>Native:   Native login (SSO via the Uber App)</li></ul>
typedef SWIFT_ENUM_NAMED(NSInteger, UBSDKLoginType, "LoginType") {
  UBSDKLoginTypeAuthorizationCode = 0,
  UBSDKLoginTypeImplicit = 1,
  UBSDKLoginTypeNative = 2,
};



/// Login Web View class. Wrapper around a WKWebView to handle Login flow for Implicit Grant
SWIFT_CLASS_NAMED("LoginView")
@interface UBSDKLoginView : UIView
@property (nonatomic, strong) LoginViewAuthenticator * _Nonnull loginAuthenticator;

/// Creates a LoginWebView for obtaining an access token
///
/// \param loginAuthenticator the login authentication process to use
///
/// \param frame The frame to use for the view, defaults to CGRectZero
///
/// \returns  An initialized LoginWebView
- (nonnull instancetype)initWithLoginAuthenticator:(LoginViewAuthenticator * _Nonnull)loginAuthenticator frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// Creates a LoginWebView for obtaining an access token. Defaults to a CGRectZero Frame
///
/// \param loginAuthenticator the login authentication process to use
///
/// \returns  An initialized LoginWebView
- (nonnull instancetype)initWithLoginAuthenticator:(LoginViewAuthenticator * _Nonnull)loginAuthenticator;

/// Initializer for adding a LoginWebView via Storyboard. If using this constructor, you must add the scopes you want before attempting to call loadLoginPage()
///
/// \param aDecoder The coder to use
///
/// \returns  An initialized loginWebView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Loads the login page
- (void)load;

/// Stops loading the login page and clears the view. If the login page has already loaded, calling this still clears the view.
- (void)cancelLoad;
@end

@class WKWebView;
@class WKNavigationAction;
@class WKNavigation;

@interface UBSDKLoginView (SWIFT_EXTENSION(UberRides)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
@end


@protocol UBSDKModalViewControllerDelegate;
enum ModalViewControllerColorStyle : NSInteger;
enum ModalViewControllerButtonStyle : NSInteger;


/// Convenience to wrap a ViewController in a UINavigationController and add the appropriate buttons. Allows you to modally present a view controller w/ Uber branding.
SWIFT_CLASS_NAMED("ModalViewController")
@interface UBSDKModalViewController : UIViewController

/// The ModalViewControllerDelegate
@property (nonatomic, strong) id <UBSDKModalViewControllerDelegate> _Nullable delegate;
@property (nonatomic) enum ModalViewControllerColorStyle colorStyle;

/// Initializes a ModalViewController for the given childViewController and style inside a UINavigationController with the appropriate buttons.
///
/// \param childViewController The child UIViewController to wrap
///
/// \param buttonStyle The ModalViewControllerButtonStyle to use
///
/// \returns  An initialized ModalViewController
- (nonnull instancetype)initWithChildViewController:(UIViewController * _Nonnull)childViewController buttonStyle:(enum ModalViewControllerButtonStyle)buttonStyle OBJC_DESIGNATED_INITIALIZER;

/// Initializes a ModalViewController for the given childViewController and style inside a UINavigationController with the appropriate buttons.
///
/// Defaults to the .DoneButton ModalViewControllerButtonStyle style
///
/// \param childViewController The child UIViewController to wrap
///
/// \returns  An initialized ModalViewController
- (nonnull instancetype)initWithChildViewController:(UIViewController * _Nonnull)childViewController;

/// Unavailable. ModalViewController doesn't support being initialized via init(coder:)
///
/// \param error Fatal Error
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidDisappear:(BOOL)animated;

/// Function to dimiss the modalViewController.
- (void)dismiss;
- (UIStatusBarStyle)preferredStatusBarStyle;
@end

@class UBSDKRideRequestViewController;


/// Modal View Controller to use for presenting a RideRequestViewController. Handles errors & closing the modal for you
SWIFT_CLASS_NAMED("ModalRideRequestViewController")
@interface UBSDKModalRideRequestViewController : UBSDKModalViewController

/// The RideRequestViewController this modal is wrapping
@property (nonatomic, readonly, strong) UBSDKRideRequestViewController * _Nonnull rideRequestViewController;

/// Initializer for the ModalRideRequestViewController. Wraps the provided RideRequestViewController and acts as it's delegate. Will handle errors coming in via the RideRequestViewControllerDelegate and dismiss the modal appropriately
///
/// \param rideRequestViewController The RideRequestViewController to wrap
///
/// \returns  An initialized ModalRideRequestViewController
- (nonnull instancetype)initWithRideRequestViewController:(UBSDKRideRequestViewController * _Nonnull)rideRequestViewController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (UIInterfaceOrientationMask)supportedInterfaceOrientations;
@end



/// Delegate Protocol to pass errors from the internal RideRequestView outward if necessary. For example, you might want to dismiss the View Controller if it experiences an error
SWIFT_PROTOCOL_NAMED("RideRequestViewControllerDelegate")
@protocol UBSDKRideRequestViewControllerDelegate

/// Delegate method to pass on errors from the RideRequestView that can't be handled by the RideRequestViewController
///
/// \param rideRequestViewController The RideRequestViewController that experienced the error
///
/// \param error The NSError that was experienced, with a code related to the appropriate RideRequestViewErrorType
- (void)rideRequestViewController:(UBSDKRideRequestViewController * _Nonnull)rideRequestViewController didReceiveError:(NSError * _Nonnull)error;
@end


@interface UBSDKModalRideRequestViewController (SWIFT_EXTENSION(UberRides)) <UBSDKRideRequestViewControllerDelegate>

/// ModalRideRequestViewController's implmentation for the RideRequestViewController delegate.
///
/// \param rideRequestViewController The RideRequestViewController that experienced an error
///
/// \param error The RideRequestViewError that occured
- (void)rideRequestViewController:(UBSDKRideRequestViewController * _Nonnull)rideRequestViewController didReceiveError:(NSError * _Nonnull)error;
@end



/// Possible Styles for the ModalViewController
///
/// <ul><li>Empty:       Presents the view modally without any BarButtonItems</li><li>DoneButton:  Presents the view mdoally with a Done BarButtonItem in the top right corner</li></ul>
typedef SWIFT_ENUM(NSInteger, ModalViewControllerButtonStyle) {
  ModalViewControllerButtonStyleEmpty = 0,
  ModalViewControllerButtonStyleDoneButton = 1,
  ModalViewControllerButtonStyleBackButton = 2,
};


/// Possible color style for the ModalViewController
///
/// <ul><li>Default: Default dark style, dark navigation bar with light text</li><li>Light:   Light color style, light navigation bar with dark text</li></ul>
typedef SWIFT_ENUM(NSInteger, ModalViewControllerColorStyle) {
  ModalViewControllerColorStyleDefault = 0,
  ModalViewControllerColorStyleLight = 1,
};



/// The ModalViewControllerDelegate protocol
SWIFT_PROTOCOL_NAMED("ModalViewControllerDelegate")
@protocol UBSDKModalViewControllerDelegate

/// Called before the ModalViewController dismisses the modal.
///
/// \param modalViewController The ModalViewController that will be dismissed
- (void)modalViewControllerWillDismiss:(UBSDKModalViewController * _Nonnull)modalViewController;

/// Called after the ModalViewController is dismissed.
///
/// \param modalViewController The ModalViewController that was dismissed
- (void)modalViewControllerDidDismiss:(UBSDKModalViewController * _Nonnull)modalViewController;
@end


@interface NSURLComponents (SWIFT_EXTENSION(UberRides))
@end



/// UberAuthenticating object for authenticating a user via the Native Uber app
SWIFT_CLASS_NAMED("NativeAuthenticator")
@interface UBSSONativeAuthenticator : UBSDKBaseAuthenticator

/// The completion block to call when the deeplink is completed. Bool indicates if the deeplink was successful
@property (nonatomic, copy) void (^ _Nullable deeplinkCompletion)(NSError * _Nullable);

/// Creates a NativeAuthenticator using the provided scopes
///
/// \param request the URL request.
///
/// \returns  true if a redirect was handled, false otherwise.
- (nonnull instancetype)initWithScopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("PaymentMethod")
@interface UBSDKPaymentMethod : NSObject

/// The account identification or description associated with the payment method.
@property (nonatomic, readonly, copy) NSString * _Nullable paymentDescription;

/// Unique identifier of the payment method.
@property (nonatomic, readonly, copy) NSString * _Nullable methodID;

/// The type of the payment method. See https://developer.uber.com/docs/v1-payment-methods.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@end


@interface UBSDKPaymentMethod (SWIFT_EXTENSION(UberRides))
@end



/// Describes a pre-set place for an Uber account (home or work).
SWIFT_CLASS_NAMED("Place")
@interface UBSDKPlace : NSObject

/// Convenience constant for "home" place ID
+ (NSString * _Nonnull)Home;

/// Convenience constant for "work" place ID
+ (NSString * _Nonnull)Work;

/// Fully qualified address of the location.
@property (nonatomic, readonly, copy) NSString * _Nullable address;
@end


@interface UBSDKPlace (SWIFT_EXTENSION(UberRides))
@end

@class ServiceFee;


/// <ul><li>Contains basic price details for an Uber product.</li></ul>
SWIFT_CLASS_NAMED("PriceDetails")
@interface UBSDKPriceDetails : NSObject

/// Unit of distance used to calculate fare (mile or km).
@property (nonatomic, readonly, copy) NSString * _Nullable distanceUnit;

/// ISO 4217 currency code.
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;

/// The charge per minute (if applicable).
@property (nonatomic, readonly) double costPerMinute;

/// The charge per distance unit (if applicable).
@property (nonatomic, readonly) double costPerDistance;

/// The base price.
@property (nonatomic, readonly) double baseFee;

/// The minimum price of a trip.
@property (nonatomic, readonly) double minimumFee;

/// The fee if a rider cancels the trip after a grace period.
@property (nonatomic, readonly) double cancellationFee;

/// Array containing additional fees added to the price. See ServiceFee.
@property (nonatomic, readonly, copy) NSArray<ServiceFee *> * _Nullable serviceFees;
@end


@interface UBSDKPriceDetails (SWIFT_EXTENSION(UberRides))
@end



/// <ul><li>Contains information about estimated price range for each Uber product offered at a location.</li></ul>
SWIFT_CLASS_NAMED("PriceEstimate")
@interface UBSDKPriceEstimate : NSObject

/// ISO 4217 currency code.
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;

/// Expected activity distance (in miles).
@property (nonatomic, readonly) double distance;

/// Expected activity duration (in seconds).
@property (nonatomic, readonly) NSInteger duration;

/// A formatted string representing the estimate in local currency. Could be range, single number, or "Metered" for TAXI.
@property (nonatomic, readonly, copy) NSString * _Nullable estimate;

/// Upper bound of the estimated price.
@property (nonatomic, readonly) NSInteger highEstimate;

/// Lower bound of the estimated price.
@property (nonatomic, readonly) NSInteger lowEstimate;

/// Display name of product. Ex: "UberBLACK".
@property (nonatomic, readonly, copy) NSString * _Nullable name;

/// Unique identifier representing a specific product for a given latitude & longitude.
@property (nonatomic, readonly, copy) NSString * _Nullable productID;

/// The unique identifier of the surge session for a user. Nil for no surge.
@property (nonatomic, readonly, copy) NSString * _Nullable surgeConfirmationID;

/// The URL a user must visit to accept surge pricing.
@property (nonatomic, readonly, copy) NSString * _Nullable surgeConfirmationURL;

/// Expected surge multiplier (active if surge is greater than 1).
@property (nonatomic, readonly) double surgeMultiplier;
@end


@interface UBSDKPriceEstimate (SWIFT_EXTENSION(UberRides))
@end


/// An enum to represent the region that the SDK should use for making requests
///
/// <ul><li>Default: The default region</li><li>China:   China, for apps that are based in China</li></ul>
typedef SWIFT_ENUM(NSInteger, Region) {
  RegionDefault = 0,
  RegionChina = 1,
};

typedef SWIFT_ENUM(NSInteger, RequestButtonColorStyle) {
  RequestButtonColorStyleBlack = 0,
  RequestButtonColorStyleWhite = 1,
};



/// Builds and executes a deeplink to the native Uber app to request a ride.
SWIFT_CLASS_NAMED("RequestDeeplink")
@interface UBSDKRequestDeeplink : UBSDKBaseDeeplink
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
@class NSHTTPURLResponse;
@class UBSDKRidesError;


/// <ul><li>Struct that packages the response from an executed NSURLRequest.</li></ul>
SWIFT_CLASS_NAMED("Response")
@interface UBSDKResponse : NSObject

/// String representing JSON response data.
@property (nonatomic, strong) NSData * _Nullable data;

/// HTTP status code of response.
@property (nonatomic) NSInteger statusCode;

/// Response metadata.
@property (nonatomic, strong) NSHTTPURLResponse * _Nullable response;

/// NSError representing an optional error.
@property (nonatomic, strong) UBSDKRidesError * _Nullable error;
@end

@class UBSDKRideRequestLocation;
@class UBSDKVehicle;


/// Contains the status of an ongoing/completed trip created using the Ride Request endpoint
SWIFT_CLASS_NAMED("Ride")
@interface UBSDKRide : NSObject

/// Contains the information about the destination of the trip, if one has been set.
@property (nonatomic, readonly, strong) UBSDKRideRequestLocation * _Nullable destination;

/// The object that contains driver details. Only non-null during an ongoing trip.
@property (nonatomic, readonly, strong) UBSDKDriver * _Nullable driver;

/// The object that contains the location information of the vehicle and driver.
@property (nonatomic, readonly, strong) UBSDKRideRequestLocation * _Nullable driverLocation;

/// The estimated time of vehicle arrival in minutes.
@property (nonatomic, readonly) NSInteger eta;

/// The object containing the information about the pickup for the trip.
@property (nonatomic, readonly, strong) UBSDKRideRequestLocation * _Nullable pickup;

/// The unique ID of the Request.
@property (nonatomic, readonly, copy) NSString * _Nullable requestID;

/// The surge pricing multiplier used to calculate the increased price of a Request.
@property (nonatomic, readonly) double surgeMultiplier;

/// The object that contains vehicle details. Only non-null during an ongoing trip.
@property (nonatomic, readonly, strong) UBSDKVehicle * _Nullable vehicle;
@end


@interface UBSDKRide (SWIFT_EXTENSION(UberRides))
@end



/// Describes the charges made against the rider in a ride receipt.
SWIFT_CLASS_NAMED("RideCharge")
@interface UBSDKRideCharge : NSObject

/// The amount of the charge.
@property (nonatomic, readonly) float amount;

/// The name of the charge.
@property (nonatomic, readonly, copy) NSString * _Nullable name;

/// The type of the charge.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@end


@interface UBSDKRideCharge (SWIFT_EXTENSION(UberRides))
@end



/// Contains estimates for a desired ride request.
SWIFT_CLASS_NAMED("RideEstimate")
@interface UBSDKRideEstimate : NSObject

/// Details of the estimated fare. If end location omitted, only the minimum is returned.
@property (nonatomic, readonly, strong) UBSDKPriceEstimate * _Nullable priceEstimate;

/// Details of the estimated distance. Nil if end location is omitted.
@property (nonatomic, readonly, strong) UBSDKDistanceEstimate * _Nullable distanceEstimate;

/// The estimated time of vehicle arrival in minutes. -1 if there are no cars available.
@property (nonatomic, readonly) NSInteger pickupEstimate;
@end


@interface UBSDKRideEstimate (SWIFT_EXTENSION(UberRides))
@end



/// Visual representation of a ride request, only available after a request is accepted.
SWIFT_CLASS_NAMED("RideMap")
@interface UBSDKRideMap : NSObject

/// URL to a map representing the requested trip.
@property (nonatomic, readonly, copy) NSString * _Nullable path;

/// Unique identifier representing a ride request.
@property (nonatomic, readonly, copy) NSString * _Nullable requestID;
@end


@interface UBSDKRideMap (SWIFT_EXTENSION(UberRides))
@end

@class CLLocation;


/// Object to represent the parameters needed to request a ride. Should be built using a RideParametersBuilder
SWIFT_CLASS_NAMED("RideParameters")
@interface UBSDKRideParameters : NSObject

/// True if the pickup location should use the device's current location, false if a location has been set
@property (nonatomic, readonly) BOOL useCurrentLocationForPickup;

/// ProductID to use for the ride
@property (nonatomic, readonly, copy) NSString * _Nullable productID;

/// The pickup location to use for the ride
@property (nonatomic, readonly, strong) CLLocation * _Nullable pickupLocation;

/// The nickname of the pickup location of the ride
@property (nonatomic, readonly, copy) NSString * _Nullable pickupNickname;

/// The address of the pickup location of the ride
@property (nonatomic, readonly, copy) NSString * _Nullable pickupAddress;

/// This is the name of an Uber saved place. Only “home” or “work” is acceptable.
@property (nonatomic, readonly, copy) NSString * _Nullable pickupPlaceID;

/// The dropoff location to use for the ride
@property (nonatomic, readonly, strong) CLLocation * _Nullable dropoffLocation;

/// The nickname of the dropoff location for the ride
@property (nonatomic, readonly, copy) NSString * _Nullable dropoffNickname;

/// The adress of the dropoff location of the ride
@property (nonatomic, readonly, copy) NSString * _Nullable dropoffAddress;

/// This is the name of an Uber saved place. Only “home” or “work” is acceptable.
@property (nonatomic, readonly, copy) NSString * _Nullable dropoffPlaceID;

/// The unique identifier of the payment method selected by a user.
@property (nonatomic, readonly, copy) NSString * _Nullable paymentMethod;

/// The unique identifier of the surge session for a user.
@property (nonatomic, readonly, copy) NSString * _Nullable surgeConfirmationID;
@end



/// Builder for a RideParameters object.
SWIFT_CLASS_NAMED("RideParametersBuilder")
@interface UBSDKRideParametersBuilder : NSObject
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nullable)rideParameters OBJC_DESIGNATED_INITIALIZER;

/// Set the product ID for the ride parameters.
///
/// \param productID The unique ID of the product being requested.
///
/// \returns  RideParametersBuilder to continue chaining.
- (UBSDKRideParametersBuilder * _Nonnull)setProductID:(NSString * _Nonnull)productID;

/// Sets the builder to use your current location for pickup. Will clear any set pickupLocation, pickupNickname, and pickupAddress.
- (UBSDKRideParametersBuilder * _Nonnull)setPickupToCurrentLocation;

/// Sets the builder to use the given place ID as the pickup location. This will remove any existing pickup location. Please note that place IDs are not supported for RequestDeeplink.
///
/// \param placeID the place ID of the pickup location - either "home" or "work".
///
/// \returns  RideParametersBuilder to continue chaining.
- (UBSDKRideParametersBuilder * _Nonnull)setPickupPlaceID:(NSString * _Nonnull)placeID;

/// Set pickup location information for the ride parameters.
///
/// \param location CLLocation of pickup.
///
/// \param nickname Optional nickname of pickup location.
///
/// \param address Optional address of pickup location.
///
/// \returns  RideParametersBuilder to continue chaining.
- (UBSDKRideParametersBuilder * _Nonnull)setPickupLocation:(CLLocation * _Nonnull)location nickname:(NSString * _Nullable)nickname address:(NSString * _Nullable)address;

/// Set pickup location information for the ride parameters.
///
/// \param location CLLocation of pickup.
///
/// \param address Optional address of pickup location.
///
/// \returns  RideParametersBuilder to continue chaining.
- (UBSDKRideParametersBuilder * _Nonnull)setPickupLocation:(CLLocation * _Nonnull)location address:(NSString * _Nullable)address;

/// Set pickup location information for the ride parameters.
///
/// \param location CLLocation of pickup.
///
/// \param nickname Optional nickname of pickup location.
///
/// \returns  RideParametersBuilder to continue chaining.
- (UBSDKRideParametersBuilder * _Nonnull)setPickupLocation:(CLLocation * _Nonnull)location nickname:(NSString * _Nullable)nickname;

/// Set pickup location information for the ride parameters.
///
/// \param location CLLocation of pickup.
///
/// \returns  RideParametersBuilder to continue chaining.
- (UBSDKRideParametersBuilder * _Nonnull)setPickupLocation:(CLLocation * _Nonnull)location;

/// Set dropoff location information for the ride parameters.
///
/// \param location CLLocation of dropoff.
///
/// \param nickname Optional nickname of dropoff location.
///
/// \param address Optional address of dropoff location.
///
/// \returns  RideParametersBuilder to continue chaining.
- (UBSDKRideParametersBuilder * _Nonnull)setDropoffLocation:(CLLocation * _Nonnull)location nickname:(NSString * _Nullable)nickname address:(NSString * _Nullable)address;

/// Set dropoff location information for the ride parameters.
///
/// \param location CLLocation of dropoff.
///
/// \param address Optional address of dropoff location.
///
/// \returns  RideParametersBuilder to continue chaining.
- (UBSDKRideParametersBuilder * _Nonnull)setDropoffLocation:(CLLocation * _Nonnull)location address:(NSString * _Nullable)address;

/// Set dropoff location information for the ride parameters.
///
/// \param location CLLocation of dropoff.
///
/// \param nickname Optional nickname of dropoff location.
///
/// \returns  RideParametersBuilder to continue chaining.
- (UBSDKRideParametersBuilder * _Nonnull)setDropoffLocation:(CLLocation * _Nonnull)location nickname:(NSString * _Nullable)nickname;

/// Set dropoff location information for the ride parameters.
///
/// \param location CLLocation of dropoff.
///
/// \returns  RideParametersBuilder to continue chaining.
- (UBSDKRideParametersBuilder * _Nonnull)setDropoffLocation:(CLLocation * _Nonnull)location;

/// Sets the builder to use the given place ID as the dropoff location. This will remove any existing dropoff location. Please note that place IDs are not supported for RequestDeeplink and the Ride Request Widget.
///
/// \param placeID the place ID of the dropoff location - either "home" or "work".
///
/// \returns  RideParametersBuilder to continue chaining.
- (UBSDKRideParametersBuilder * _Nonnull)setDropoffPlaceID:(NSString * _Nonnull)placeID;

/// Sets the builder to use the given payment method for the user. If set, the trip will be requested using this payment method. If not set, the trip will be requested using the user’s last used payment method. Please note that payment methods are not supported for RequestDeeplink and the Ride Request Widget.
///
/// \param method unique identifier of payment method.
///
/// \returns  RideParametersBuilder to continue chaining.
- (UBSDKRideParametersBuilder * _Nonnull)setPaymentMethod:(NSString * _Nonnull)method;

/// Sets the builder to use the surge confirmation ID for making ride requests that have surge. Please note surge confirmation is not supported for RequestDeeplink and the Ride Request Widget.
///
/// \param surgeConfirmation the unique identifier of the surge session for a user.
///
/// \returns  RideParametersBuilder to continue chaining.
- (UBSDKRideParametersBuilder * _Nonnull)setSurgeConfirmationID:(NSString * _Nonnull)surgeConfirmation;

/// Build the ride parameter object.
///
/// \returns  An initialized RideParameters object
- (UBSDKRideParameters * _Nonnull)build;
@end



/// Get the receipt information of a completed request that was made with the request endpoint.
SWIFT_CLASS_NAMED("RideReceipt")
@interface UBSDKRideReceipt : NSObject

/// Adjustments made to the charges such as promotions, and fees.
@property (nonatomic, readonly, copy) NSArray<UBSDKRideCharge *> * _Nullable chargeAdjustments;

/// Describes the charges made against the rider.
@property (nonatomic, readonly, copy) NSArray<UBSDKRideCharge *> * _Nullable charges;

/// ISO 4217
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;

/// Distance of the trip charged.
@property (nonatomic, readonly, copy) NSString * _Nullable distance;

/// The localized unit of distance.
@property (nonatomic, readonly, copy) NSString * _Nullable distanceLabel;

/// Time duration of the trip in ISO 8601 HH:MM:SS format.
@property (nonatomic, readonly, copy) NSString * _Nullable duration;

/// The summation of the charges array.
@property (nonatomic, readonly, copy) NSString * _Nullable normalFare;

/// Unique identifier representing a Request.
@property (nonatomic, readonly, copy) NSString * _Nullable requestID;

/// The summation of the normal fare and surge charge amount.
@property (nonatomic, readonly, copy) NSString * _Nullable subtotal;

/// Describes the surge charge. May be null if surge pricing was not in effect.
@property (nonatomic, readonly, strong) UBSDKRideCharge * _Nullable surgeCharge;

/// The total amount charged to the users payment method. This is the the subtotal (split if applicable) with taxes included.
@property (nonatomic, readonly, copy) NSString * _Nullable totalCharged;

/// The total amount still owed after attempting to charge the user. May be 0 if amount was paid in full.
@property (nonatomic, readonly) double totalOwed;
@end


@interface UBSDKRideReceipt (SWIFT_EXTENSION(UberRides))
@end

@protocol UBSDKRideRequestButtonDelegate;
@class UBSDKRidesClient;


/// RequestButton implements a button on the touch screen to request a ride.
SWIFT_CLASS_NAMED("RideRequestButton")
@interface UBSDKRideRequestButton : UBSDKUberButton

/// Delegate is informed of events that occur with request button.
@property (nonatomic, strong) id <UBSDKRideRequestButtonDelegate> _Nullable delegate;

/// The RideParameters object this button will use to make a request
@property (nonatomic, strong) UBSDKRideParameters * _Nonnull rideParameters;

/// The RideRequesting object the button will use to make a request
@property (nonatomic, strong) id <UBSDKRideRequesting> _Nonnull requestBehavior;

/// The RidesClient used for retrieving metadata for the button.
@property (nonatomic, strong) UBSDKRidesClient * _Nullable client;

/// Initializer to use in storyboard. Must call setRidesClient for request button to show metadata. requestBehavior defaults to DeeplinkRequestingBehavior rideParameters defaults to RideParameters with pickup location set to current location
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// The Request button initializer.
///
/// \param client The RidesClient to use for getting button metadata
///
/// \param rideParameters The RideParameters for this button. These parameters are used to request a ride when the button is tapped.
///
/// \param requestingBehavior The RideRequesting object to use for requesting a ride.
///
/// \returns  An initialized RideRequestButton
- (nonnull instancetype)initWithClient:(UBSDKRidesClient * _Nonnull)client rideParameters:(UBSDKRideParameters * _Nonnull)rideParameters requestingBehavior:(id <UBSDKRideRequesting> _Nonnull)requestingBehavior OBJC_DESIGNATED_INITIALIZER;

/// The Request button initializer. Uses a default RidesClient
///
/// \param rideParameters The RideParameters for this button. These parameters are used to request a ride when the button is tapped.
///
/// \param requestingBehavior The RideRequesting object to use for requesting a ride.
///
/// \returns  An initialized RideRequestButton
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters requestingBehavior:(id <UBSDKRideRequesting> _Nonnull)requestingBehavior;

/// The RideRequestButton initializer. Uses DeeplinkRequestingBehavior by default Defaults to using the current location for pickup
///
/// \param client The RidesClient to use for getting button metadata
///
/// \returns  An initialized RideRequestButton
- (nonnull instancetype)initWithClient:(UBSDKRidesClient * _Nonnull)client;

/// The RideRequestButton initializer. Creates a request button that uses the Deeplink Requesting behavior & the provided RidesParameters Uses a default RidesClient
///
/// \param rideParameters The RideParameters for this button. These parameters are used to request a ride when the button is tapped.
///
/// \returns  An initialized RideRequestButton
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters;

/// The RideRequestButton initializer. Defaults to using the current location for pickup Uses a default RidesClient
///
/// \param requestingBehavior The RideRequesting object to use for requesting a ride.
///
/// \returns  An initialized RideRequestButton
- (nonnull instancetype)initWithRequestingBehavior:(id <UBSDKRideRequesting> _Nonnull)requestingBehavior;

/// The Request button initializer. Defaults to using the current location for pickup Defaults to DeeplinkRequestingBehavior, which links into the Uber app Uses a default RidesClient
///
/// \returns  An initialized RideRequestButton
- (nonnull instancetype)init;

/// Setup the RideRequestButton by adding  a target to the button and setting the login completion block
- (void)setup;

/// Adds the Metadata Label to the button
- (void)addSubviews;

/// Updates the content of the button. Sets the image icon and font, as well as the text
- (void)setContent;

/// Adds the layout constraints for the ride request button.
- (void)setConstraints;
- (CGSize)sizeThatFits:(CGSize)size;

/// Manual refresh for the ride information on the button. The product ID must be set in order to show any metadata.
- (void)loadRideInformation;
@end



/// Protocol to listen to request button events, such as loading button content
SWIFT_PROTOCOL_NAMED("RideRequestButtonDelegate")
@protocol UBSDKRideRequestButtonDelegate

/// The button finished loading ride information successfully.
///
/// \param button the RideRequestButton
- (void)rideRequestButtonDidLoadRideInformation:(UBSDKRideRequestButton * _Nonnull)button;

/// The button encountered an error when refreshing its metadata content.
///
/// \param button the RideRequestButton
///
/// \param error the error that it encountered
- (void)rideRequestButton:(UBSDKRideRequestButton * _Nonnull)button didReceiveError:(UBSDKRidesError * _Nonnull)error;
@end



/// Location of a pickup or destination in a ride request.
SWIFT_CLASS_NAMED("RideRequestLocation")
@interface UBSDKRideRequestLocation : NSObject

/// The current bearing in degrees for a moving location.
@property (nonatomic, readonly) NSInteger bearing;

/// ETA is only available when the trips is accepted or arriving.
@property (nonatomic, readonly) NSInteger eta;

/// The latitude of the location.
@property (nonatomic, readonly) double latitude;

/// The longitude of the location.
@property (nonatomic, readonly) double longitude;
@end


@interface UBSDKRideRequestLocation (SWIFT_EXTENSION(UberRides))
@end

@protocol UBSDKRideRequestViewDelegate;


/// A view that shows the embedded Uber experience.
SWIFT_CLASS_NAMED("RideRequestView")
@interface UBSDKRideRequestView : UIView

/// The RideRequestViewDelegate of this view.
@property (nonatomic, strong) id <UBSDKRideRequestViewDelegate> _Nullable delegate;

/// The access token used to authorize the web view
@property (nonatomic, strong) UBSDKAccessToken * _Nullable accessToken;

/// Ther RideParameters to use for prefilling the RideRequestView
@property (nonatomic, strong) UBSDKRideParameters * _Nonnull rideParameters;

/// Initializes to show the embedded Uber ride request view.
///
/// \param rideParameters The RideParameters to use for presetting values; defaults to using the current location for pickup
///
/// \param accessToken specific access token to use with web view; defaults to using TokenManager's default token
///
/// \param frame frame of the view. Defaults to CGRectZero
///
/// \returns  An initialized RideRequestView
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters accessToken:(UBSDKAccessToken * _Nullable)accessToken frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// Initializes to show the embedded Uber ride request view. Uses the TokenManager's default accessToken
///
/// \param rideParameters The RideParameters to use for presetting values
///
/// \param frame frame of the view
///
/// \returns  An initialized RideRequestView
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters frame:(CGRect)frame;

/// Initializes to show the embedded Uber ride request view. Frame defaults to CGRectZero Uses the TokenManager's default accessToken
///
/// \param rideParameters The RideParameters to use for presetting values
///
/// \returns  An initialized RideRequestView
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters;

/// Initializes to show the embedded Uber ride request view. Uses the current location for pickup Uses the TokenManager's default accessToken
///
/// \param frame frame of the view
///
/// \returns  An initialized RideRequestView
- (nonnull instancetype)initWithFrame:(CGRect)frame;

/// Initializes to show the embedded Uber ride request view. Uses the current location for pickup Uses the TokenManager's default accessToken Frame defaults to CGRectZero
///
/// \returns  An initialized RideRequestView
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Load the Uber Ride Request Widget view. Requires that the access token has been retrieved.
- (void)load;

/// Stop loading the Ride Request Widget View and clears the view. If the view has already loaded, calling this still clears the view.
- (void)cancelLoad;
@end

@class UIScrollView;

@interface UBSDKRideRequestView (SWIFT_EXTENSION(UberRides)) <UIScrollViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


@interface UBSDKRideRequestView (SWIFT_EXTENSION(UberRides)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
@end


SWIFT_CLASS_NAMED("RideRequestViewController")
@interface UBSDKRideRequestViewController : UIViewController

/// The RideRequestViewControllerDelegate to handle the errors
@property (nonatomic, strong) id <UBSDKRideRequestViewControllerDelegate> _Nullable delegate;

/// The LoginManager to use for managing the login process
@property (nonatomic, strong) UBSDKLoginManager * _Nonnull loginManager;

/// Initializes a RideRequestViewController using the provided coder. By default, uses the default token identifier and access group
///
/// \param aDecoder The Coder to use
///
/// \returns  An initialized RideRequestViewController, or nil if something went wrong
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Designated initializer for the RideRequestViewController.
///
/// \param rideParameters The RideParameters to use for prefilling the RideRequestView.
///
/// \param loginManager The LoginManger to use for logging in (if required). Also uses its values for token identifier & access group to check for an access token
///
/// \returns  An initialized RideRequestViewController
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters loginManager:(UBSDKLoginManager * _Nonnull)loginManager OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (UIInterfaceOrientationMask)supportedInterfaceOrientations;
@end



/// Delegates are informed of events that occur in the RideRequestView such as errors.
SWIFT_PROTOCOL_NAMED("RideRequestViewDelegate")
@protocol UBSDKRideRequestViewDelegate

/// An error has occurred in the Ride Request Control.
///
/// \param rideRequestView the RideRequestView
///
/// \param error the NSError that occured, with a code of RideRequestViewErrorType
- (void)rideRequestView:(UBSDKRideRequestView * _Nonnull)rideRequestView didReceiveError:(NSError * _Nonnull)error;
@end


@interface UBSDKRideRequestViewController (SWIFT_EXTENSION(UberRides)) <UBSDKRideRequestViewDelegate>
- (void)rideRequestView:(UBSDKRideRequestView * _Nonnull)rideRequestView didReceiveError:(NSError * _Nonnull)error;
@end




/// Possible errors that can occur in the RideRequestView.
///
/// <ul><li>AccessTokenMissing:         There is no access token to make the request with</li><li>AccessTokenExpired:         Access token has expired.</li><li>NetworkError:               A network error occured</li><li>NotSupported:               The functionality attempted is not supported on the current device</li><li>Unknown:                    Unknown error occured.</li></ul>
typedef SWIFT_ENUM(NSInteger, RideRequestViewErrorType) {
  RideRequestViewErrorTypeAccessTokenExpired = 0,
  RideRequestViewErrorTypeAccessTokenMissing = 1,
  RideRequestViewErrorTypeNetworkError = 2,
  RideRequestViewErrorTypeNotSupported = 3,
  RideRequestViewErrorTypeUnknown = 4,
};



/// A RideRequesting object for requesting a ride via the RideRequestViewController
SWIFT_CLASS_NAMED("RideRequestViewRequestingBehavior")
@interface UBSDKRideRequestViewRequestingBehavior : NSObject

/// The UIViewController to present the RideRequestViewController over
@property (nonatomic, assign) UIViewController * _Nonnull presentingViewController;

/// The LoginManager to use with the RideRequestViewController. Uses the accessTokenIdentifier & keychainAccessGroup to get an AccessToken. Will be used to log a user in, if necessary
@property (nonatomic, strong) UBSDKLoginManager * _Nonnull loginManager;

/// The ModalRideRequestViewController that is created by this behavior, only exists after requestRide() is called
@property (nonatomic, readonly, strong) UBSDKModalRideRequestViewController * _Nonnull modalRideRequestViewController;

/// Creates the RideRequestViewRequestingBehavior with the given presenting view controller. This view controller will be used to modally present the ModalRideRequestViewController when this behavior is executed
///
/// \param presentingViewController The UIViewController to present the ModalRideRequestViewController over
///
/// \param loginManager The LoginManager to use for managing the AccessToken for the RideRequestView
///
/// \returns  An initialized RideRequestViewRequestingBehavior object
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController loginManager:(UBSDKLoginManager * _Nonnull)loginManager OBJC_DESIGNATED_INITIALIZER;

/// Creates the RideRequestViewRequestingBehavior with the given presenting view controller. This view controller will be used to modally present the ModalRideRequestViewController when this behavior is executed
///
/// Uses a default LoginManager() for login & token management
///
/// \param presentingViewController The UIViewController to present the ModalRideRequestViewController over
///
/// \returns  An initialized RideRequestViewRequestingBehavior object
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController;
@end


@interface UBSDKRideRequestViewRequestingBehavior (SWIFT_EXTENSION(UberRides)) <UBSDKRideRequesting>

/// Requests a ride by presenting a RideRequestView that is constructed using the provided rideParameters
///
/// \param rideParameters The RideParameters to use for building and prefilling
/// the RideRequestView
- (void)requestRide:(UBSDKRideParameters * _Nullable)rideParameters;
@end



/// The status of a ride.
///
/// <ul><li>Accepted:           The request was accepted by a driver and "en route" to start location.</li><li>Arriving:           The driver has arrived or will be shortly.</li><li>Completed:          Ride has been completed.</li><li>DriverCanceled:     Ride request has been canceled by the driver.</li><li>InProgress:         The ride is "en route" from the start location to the end location.</li><li>NoDriversAvailable: The ride request was unfulfilled because no drivers were available.</li><li>Processing:         The ride request is matching to the best available driver.</li><li>RiderCanceled:      The ride request was canceled by rider.</li><li>Unknown:            An unexpected status.</li></ul>
typedef SWIFT_ENUM_NAMED(NSInteger, UBSDKRideStatus, "RideStatus") {
  UBSDKRideStatusAccepted = 0,
  UBSDKRideStatusArriving = 1,
  UBSDKRideStatusCompleted = 2,
  UBSDKRideStatusDriverCanceled = 3,
  UBSDKRideStatusInProgress = 4,
  UBSDKRideStatusNoDriversAvailable = 5,
  UBSDKRideStatusProcessing = 6,
  UBSDKRideStatusRiderCanceled = 7,
  UBSDKRideStatusUnknown = 8,
};



/// Responsible for parsing any events that require switching to the Uber app. Designed to mimic methods from your application's AppDelegate and should be called inside their corresponding methods
SWIFT_CLASS_NAMED("RidesAppDelegate")
@interface UBSDKRidesAppDelegate : NSObject
+ (UBSDKRidesAppDelegate * _Nonnull)sharedInstance;
@property (nonatomic, strong) id <LoginManaging> _Nullable loginManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Handles parsing a deeplink that can be handled by the Rides SDK. Should be be called in your ApplicationDelegate: application:openURL:sourceApplication:annotation: (iOS 8) OR app:openURL:options: (iOS 9+), passing in options[UIApplicationOpenURLOptionsSourceApplicationKey] as sourceApplication
///
/// \param application Your singleton app object. As passed to the corresponding AppDelegate method
///
/// \param url The URL resource to open. As passed to the corresponding AppDelegate methods
///
/// \param sourceApplication The bundle ID of the app that is requesting
/// your app to open the URL (url). As passed to the corresponding AppDelegate method (iOS 8) or
/// options[UIApplicationOpenURLOptionsSourceApplicationKey] (iOS 9+)
///
/// \param annotation A property list object supplied by the source app to
/// communicate information to the receiving app As passed to the corresponding AppDelegate method
///
/// \returns  true if the URL was intended for the Rides SDK, false otherwise
- (BOOL)application:(UIApplication * _Nonnull)application openURL:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication annotation:(id _Nullable)annotation;
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary * _Nullable)launchOptions;
@end


/// Possible authentication errors.
///
/// <ul><li>AccessDenied:            The user denied the requested scopes.</li><li>ExpiredJWT:              The scope accept session expired.</li><li>GeneralError:            A general error occured.</li><li>InternalServerError:     An internal server error occured.</li><li>InvalidAppSignature:     The provided app signature did not match what was expected.</li><li>InvalidAuthCode:         There was a problem authorizing you.</li><li>InvalidClientID:         Invalid client ID provided for authentication.</li><li>InvalidFlowError:        There was a problem displaying the authorize screen.</li><li>InvalidJWT:              There was a problem authorizing you.</li><li>InvalidJWTSignature:     There was a problem authorizing you.</li><li>InvalidNonce:            There was a problem authorizing you.</li><li>InvalidRedirect:         Redirect URI provided was invalid</li><li>InvalidRequest:          General case for invalid requests.</li><li>InvalidResponse:         The response from the server was un-parseable</li><li>InvalidScope:            Scopes provided contains an invalid scope.</li><li>InvalidSSOResponse:      The server responded with an invalid response.</li><li>InvalidUserID:           There was a problem with your user ID.</li><li>MalformedRequest:        There was a problem loading the authorize screen.</li><li>MismatchingRedirect:     Redirect URI provided doesn't match one registered for client ID.</li><li>NetworkError:            A network error occured</li><li>ServerError:             A server error occurred during authentication.</li><li>UnableToPresentLogin:    Unable to present the login screen</li><li>UnableToSaveAccessToken: There was a problem saving the access token</li><li>Unavailable:             Authentication services temporarily unavailable.</li><li>UserCancelled:           User cancelled the auth process</li></ul>
typedef SWIFT_ENUM(NSInteger, RidesAuthenticationErrorType) {
  RidesAuthenticationErrorTypeAccessDenied = 0,
  RidesAuthenticationErrorTypeExpiredJWT = 1,
  RidesAuthenticationErrorTypeGeneralError = 2,
  RidesAuthenticationErrorTypeInternalServerError = 3,
  RidesAuthenticationErrorTypeInvalidAppSignature = 4,
  RidesAuthenticationErrorTypeInvalidAuthCode = 5,
  RidesAuthenticationErrorTypeInvalidClientID = 6,
  RidesAuthenticationErrorTypeInvalidFlowError = 7,
  RidesAuthenticationErrorTypeInvalidJWT = 8,
  RidesAuthenticationErrorTypeInvalidJWTSignature = 9,
  RidesAuthenticationErrorTypeInvalidNonce = 10,
  RidesAuthenticationErrorTypeInvalidRedirect = 11,
  RidesAuthenticationErrorTypeInvalidRequest = 12,
  RidesAuthenticationErrorTypeInvalidResponse = 13,
  RidesAuthenticationErrorTypeInvalidScope = 14,
  RidesAuthenticationErrorTypeInvalidSSOResponse = 15,
  RidesAuthenticationErrorTypeInvalidUserID = 16,
  RidesAuthenticationErrorTypeMalformedRequest = 17,
  RidesAuthenticationErrorTypeMismatchingRedirect = 18,
  RidesAuthenticationErrorTypeNetworkError = 19,
  RidesAuthenticationErrorTypeServerError = 20,
  RidesAuthenticationErrorTypeUnableToPresentLogin = 21,
  RidesAuthenticationErrorTypeUnableToSaveAccessToken = 22,
  RidesAuthenticationErrorTypeUnavailable = 23,
  RidesAuthenticationErrorTypeUserCancelled = 24,
};

@class NSURLSessionConfiguration;
@class UBSDKUberProduct;
@class UBSDKTimeEstimate;
@class UBSDKTripHistory;
@class UBSDKUserProfile;


/// API client for the Uber Rides API.
SWIFT_CLASS_NAMED("RidesClient")
@interface UBSDKRidesClient : NSObject

/// Initializer for the RidesClient. The RidesClient handles making reqeusts to the API for you.
///
/// \param accessTokenIdentifier The accessTokenIdentifier to use. This identifier
/// is used (along with keychainAccessGroup) to fetch the appropriate AccessToken. Defaults
/// to the value set in your Configuration struct
///
/// \param sessionConfiguration Configuration to use for NSURLSession. Defaults to defaultSessionConfiguration.
///
/// \param keychainAccessGroup The keychain access group to use. Uses this group
/// (along with the accessTokenIdentifier) to fetch the appropriate AccessToken. Defaults
/// to the value set in yoru Configuration struct
///
/// \returns  An initialized RidesClient
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier sessionConfiguration:(NSURLSessionConfiguration * _Nonnull)sessionConfiguration keychainAccessGroup:(NSString * _Nonnull)keychainAccessGroup OBJC_DESIGNATED_INITIALIZER;

/// Initializer for the RidesClient. The RidesClient handles making reqeusts to the API for you. By default, uses NSURLSessionConfiguration.defaultSessionConfiguration() for the URL requests
///
/// \param accessTokenIdentifier Initializer for the RidesClient. The RidesClient handles making reqeusts to the API
/// for you.
/// By default, it is initialized using the keychainAccessGroup default from your Configuration object
/// Also uses NSURLSessionConfiguration.defaultSessionConfiguration() for the URL requests
///
/// \param keychainAccessGroup The keychain access group to use. Uses this group
/// (along with the accessTokenIdentifier) to fetch the appropriate AccessToken. Defaults
/// to the value set in yoru Configuration struct
///
/// \returns  An initialized RidesClient
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier keychainAccessGroup:(NSString * _Nonnull)keychainAccessGroup;

/// Initializer for the RidesClient. The RidesClient handles making reqeusts to the API for you. By default, it is initialized using the keychainAccessGroup default from your Configuration object
///
/// \param accessTokenIdentifier The accessTokenIdentifier to use. This identifier
/// is used (along with keychainAccessGroup) to fetch the appropriate AccessToken
///
/// \param sessionConfiguration Configuration to use for NSURLSession. Defaults to defaultSessionConfiguration.
///
/// \returns  An initialized RidesClient
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier sessionConfiguration:(NSURLSessionConfiguration * _Nonnull)sessionConfiguration;

/// Initializer for the RidesClient. The RidesClient handles making reqeusts to the API for you. By default, it is initialized using the keychainAccessGroup default from your Configuration object Also uses NSURLSessionConfiguration.defaultSessionConfiguration() for the URL requests
///
/// \param accessTokenIdentifier The accessTokenIdentifier to use. This identifier
/// is used (along with keychainAccessGroup) to fetch the appropriate AccessToken
///
/// \returns  An initialized RidesClient
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier;

/// Initializer for the RidesClient. The RidesClient handles making reqeusts to the API for you. By default, it is initialized using the accessTokenIdentifier & keychainAccessGroup defaults from your Configuration object Also uses NSURLSessionConfiguration.defaultSessionConfiguration() for the URL requests
///
/// \returns  An initialized RidesClient
- (nonnull instancetype)init;

/// Retrieves the token used by this rides client.
///
/// Currently pulls from the keychain each time.
///
/// \returns  an AccessToken object, or nil if one can't be located
- (UBSDKAccessToken * _Nullable)fetchAccessToken;

/// Public getter to check for the existence of a server token.
///
/// \returns  true if a server token exists, false otherwise.
- (BOOL)hasServerToken;

/// Convenience function for returning cheapest product at location.
///
/// \param location coordinates of pickup location.
///
/// \param completion completion handler for returned product.
- (void)fetchCheapestProductWithPickupLocation:(CLLocation * _Nonnull)location completion:(void (^ _Nonnull)(UBSDKUberProduct * _Nullable product, UBSDKResponse * _Nonnull response))completion;

/// Get all products at specified location.
///
/// \param location coordinates of pickup location
///
/// \param completion completion handler for returned products.
- (void)fetchProductsWithPickupLocation:(CLLocation * _Nonnull)location completion:(void (^ _Nonnull)(NSArray<UBSDKUberProduct *> * _Nonnull products, UBSDKResponse * _Nonnull response))completion;

/// Get information for specific product.
///
/// \param productID string representing product ID.
///
/// \param completion completion handler for returned product.
- (void)fetchProduct:(NSString * _Nonnull)productID completion:(void (^ _Nonnull)(UBSDKUberProduct * _Nullable product, UBSDKResponse * _Nonnull response))completion;

/// Get time estimates for all products (or specific product) at specified pickup location.
///
/// \param pickupLocation coordinates of pickup location
///
/// \param productID optional string representing the productID.
///
/// \param completion completion handler for returned estimates.
- (void)fetchTimeEstimatesWithPickupLocation:(CLLocation * _Nonnull)location productID:(NSString * _Nullable)productID completion:(void (^ _Nonnull)(NSArray<UBSDKTimeEstimate *> * _Nonnull timeEstimates, UBSDKResponse * _Nonnull response))completion;

/// Get price estimates for all products between specified pickup and dropoff locations.
///
/// \param pickupLocation coordinates of pickup location.
///
/// \param dropoffLocation coordinates of dropoff location
///
/// \param completion completion handler for returned estimates.
- (void)fetchPriceEstimatesWithPickupLocation:(CLLocation * _Nonnull)pickupLocation dropoffLocation:(CLLocation * _Nonnull)dropoffLocation completion:(void (^ _Nonnull)(NSArray<UBSDKPriceEstimate *> * _Nonnull priceEstimates, UBSDKResponse * _Nonnull response))completion;

/// Get trip history for current authenticated user.
///
/// \param offset offset the list of returned results by this amount. Default is zero.
///
/// \param limit number of items to retrieve. Default is 5, maximum is 50.
///
/// \param completion completion handler for returned user trip history.
- (void)fetchTripHistoryWithOffset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(UBSDKTripHistory * _Nullable tripHistory, UBSDKResponse * _Nonnull response))completion;

/// Gets user profile of current authenticated user.
///
/// \param completion completion handler for returned user profile.
- (void)fetchUserProfile:(void (^ _Nonnull)(UBSDKUserProfile * _Nullable profile, UBSDKResponse * _Nonnull response))completion;

/// Request a ride on behalf of Uber user.
///
/// \param rideParameters RideParameters object containing paramaters for the request.
///
/// \param completion completion handler for returned request information.
- (void)requestRide:(UBSDKRideParameters * _Nonnull)rideParameters completion:(void (^ _Nonnull)(UBSDKRide * _Nullable ride, UBSDKResponse * _Nonnull response))completion;

/// Get the real-time details for an ongoing ride.
///
/// \param completion completion handler for returned ride information.
- (void)fetchCurrentRide:(void (^ _Nonnull)(UBSDKRide * _Nullable ride, UBSDKResponse * _Nonnull response))completion;

/// Get the status of an ongoing or completed ride that was created using the Ride Request endpoint.
///
/// \param requestID unique identifier representing a Request.
///
/// \param completion completion handler for returned trip information.
- (void)fetchRideDetails:(NSString * _Nonnull)requestID completion:(void (^ _Nonnull)(UBSDKRide * _Nullable ride, UBSDKResponse * _Nonnull response))completion;

/// Estimate a ride request given the desired product, start, and end locations.
///
/// \param rideParameters RideParameters object containing necessary information.
///
/// \param completion completion handler for returned estimate.
- (void)fetchRideRequestEstimate:(UBSDKRideParameters * _Nonnull)rideParameters completion:(void (^ _Nonnull)(UBSDKRideEstimate * _Nullable estimate, UBSDKResponse * _Nonnull response))completion;

/// Retrieve the list of the user’s available payment methods.
///
/// \param completion completion handler for returned payment method list as well as last used payment method.
- (void)fetchPaymentMethods:(void (^ _Nonnull)(NSArray<UBSDKPaymentMethod *> * _Nonnull methods, UBSDKPaymentMethod * _Nullable lastUsed, UBSDKResponse * _Nonnull response))completion;

/// Retrieve home and work addresses from an Uber user's profile.
///
/// \param placeID the name of the place to retrieve. Only home and work are acceptable.
///
/// \param completion completion handler for returned place.
- (void)fetchPlace:(NSString * _Nonnull)placeID completion:(void (^ _Nonnull)(UBSDKPlace * _Nullable place, UBSDKResponse * _Nonnull response))completion;

/// Update home and work addresses for an Uber user's profile.
///
/// \param placeID the name of the place to update. Only home and work are acceptable.
///
/// \param address the address of the place that should be tied to the given placeID.
///
/// \param completion completion handler for response.
- (void)updatePlace:(NSString * _Nonnull)placeID withAddress:(NSString * _Nonnull)address completion:(void (^ _Nonnull)(UBSDKPlace * _Nullable place, UBSDKResponse * _Nonnull response))completion;

/// Update the ride details for an ongoing ride by ID.
///
/// \param requestID the ID of the ride request. If nil, will attempt to update current trip.
///
/// \param rideParameters the RideParameters object containing the updated parameters.
///
/// \param completion completion handler for response.
- (void)updateRideDetails:(NSString * _Nullable)requestID rideParameters:(UBSDKRideParameters * _Nonnull)rideParameters completion:(void (^ _Nonnull)(UBSDKResponse * _Nonnull response))completion;

/// Update an ongoing request’s destination that was requested using the Ride Request endpoint.
///
/// \param rideParameters RideParameters object with updated ride parameters.
///
/// \param completion completion handler for response.
- (void)updateCurrentRide:(UBSDKRideParameters * _Nonnull)rideParameters completion:(void (^ _Nonnull)(UBSDKResponse * _Nonnull response))completion;

/// Cancel a user's ride using the request ID.
///
/// \param requestID request ID of the ride. If nil, current ride will be canceled.
///
/// \param completion completion handler for response.
- (void)cancelRide:(NSString * _Nullable)requestID completion:(void (^ _Nonnull)(UBSDKResponse * _Nonnull response))completion;

/// Cancel the user's current trip. This endpoint can only be used on trips that your app requested.
///
/// \param completion completion handler for response
- (void)cancelCurrentRide:(void (^ _Nonnull)(UBSDKResponse * _Nonnull response))completion;

/// Get the receipt information of a completed request.
///
/// \param requestID unique identifier representing a ride request
///
/// \param completion completion handler for receipt
- (void)fetchRideReceipt:(NSString * _Nonnull)requestID completion:(void (^ _Nonnull)(UBSDKRideReceipt * _Nullable rideReceipt, UBSDKResponse * _Nonnull response))completion;

/// Get a map with a visual representation of a Request.
///
/// \param requestID unique identifier representing a request
///
/// \param completion completion handler for map
- (void)fetchRideMap:(NSString * _Nonnull)requestID completion:(void (^ _Nonnull)(UBSDKRideMap * _Nullable map, UBSDKResponse * _Nonnull response))completion;

/// Get a refreshed AccessToken from a refresh token string. Only works for access tokens retrieved via SSO
///
/// \param refreshToken The Refresh Token String from an SSO access token
///
/// \param completion completion handler for the new access token
- (void)refreshAccessToken:(NSString * _Nonnull)refreshToken completion:(void (^ _Nonnull)(UBSDKAccessToken * _Nullable accessToken, UBSDKResponse * _Nonnull response))completion;
@end



/// Base class for errors that can be mapped from HTTP responses.
SWIFT_CLASS_NAMED("RidesError")
@interface UBSDKRidesError : NSObject

/// HTTP status code for error.
@property (nonatomic, readonly) NSInteger status;

/// Human readable message which corresponds to the client error.
@property (nonatomic, readonly, copy) NSString * _Nullable title;

/// Underscore delimited string.
@property (nonatomic, readonly, copy) NSString * _Nullable code;

/// Additional information about errors. Can be "fields" or "meta" as the key.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable meta;

/// List of additional errors. This can be populated instead of status/code/title.
@property (nonatomic, readonly, copy) NSArray<UBSDKRidesError *> * _Nullable errors;
@end



/// Client error 4xx.
SWIFT_CLASS_NAMED("RidesClientError")
@interface UBSDKRidesClientError : UBSDKRidesError
@end



@interface UBSDKRidesError (SWIFT_EXTENSION(UberRides))
@end

enum RidesScopeType : NSInteger;
enum ScopeType : NSInteger;


/// Object representing an access scope to the Uber API
SWIFT_CLASS_NAMED("RidesScope")
@interface UBSDKRidesScope : NSObject

/// The RidesScopeType of this RidesScope
@property (nonatomic, readonly) enum RidesScopeType ridesScopeType;

/// The ScopeType of this RidesScope (General / Privileged)
@property (nonatomic, readonly) enum ScopeType scopeType;

/// The String raw value of the scope
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRidesScopeType:(enum RidesScopeType)ridesScopeType OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object;
@property (nonatomic, readonly) NSUInteger hash;

/// Convenience variable for the AllTrips scope
+ (UBSDKRidesScope * _Nonnull)AllTrips;

/// Convenience variable for the History scope
+ (UBSDKRidesScope * _Nonnull)History;

/// Convenience variable for the HistoryLite scope
+ (UBSDKRidesScope * _Nonnull)HistoryLite;

/// Convenience variable for the Places scope
+ (UBSDKRidesScope * _Nonnull)Places;

/// Convenience variable for the Profile scope
+ (UBSDKRidesScope * _Nonnull)Profile;

/// Convenience variable for the Request scope
+ (UBSDKRidesScope * _Nonnull)Request;

/// Convenience variable for the RequestReceipt scope
+ (UBSDKRidesScope * _Nonnull)RequestReceipt;

/// Convenience variable for the RideWidgets scope
+ (UBSDKRidesScope * _Nonnull)RideWidgets;
@end


/// Scopes control the various API endpoints your application can access.
///
/// <ul><li>AllTrips:       Get details of the trip the user is currently taking.</li><li>History:        Pull trip data of a user's historical pickups and drop-offs.</li><li>HistoryLite:    Same as History without city information.</li><li>Places:         Save and retrieve user's favorite places.</li><li>Profile:        Access basic profile information on a user's Uber account.</li><li>Request:        Make requests for Uber rides on behalf of users.</li><li>RideReceipt:    Get receipt details for requests made by application.</li><li>RideWidgets:    The scope for using the Ride Request Widget.</li></ul>
typedef SWIFT_ENUM(NSInteger, RidesScopeType) {
  RidesScopeTypeAllTrips = 0,
  RidesScopeTypeHistory = 1,
  RidesScopeTypeHistoryLite = 2,
  RidesScopeTypePlaces = 3,
  RidesScopeTypeProfile = 4,
  RidesScopeTypeRequest = 5,
  RidesScopeTypeRequestReceipt = 6,
  RidesScopeTypeRideWidgets = 7,
};



/// Server error 5xx.
SWIFT_CLASS_NAMED("RidesServerError")
@interface UBSDKRidesServerError : UBSDKRidesError
@end



/// Unknown error type.
SWIFT_CLASS_NAMED("RidesUnknownError")
@interface UBSDKRidesUnknownError : UBSDKRidesError
@end


/// Category of scope that describes its level of access.
///
/// <ul><li>General:    scopes that can be used without review.</li><li>Privileged: scopes that require approval before opened to your users in production.</li></ul>
typedef SWIFT_ENUM(NSInteger, ScopeType) {
  ScopeTypeGeneral = 0,
  ScopeTypePrivileged = 1,
};



/// <ul><li>Contains information for additional fees that can be added to the price of an Uber product.</li></ul>
SWIFT_CLASS("_TtC9UberRides10ServiceFee")
@interface ServiceFee : NSObject

/// The name of the service fee.
@property (nonatomic, readonly, copy) NSString * _Nullable name;

/// The amount of the service fee.
@property (nonatomic, readonly) double fee;
@end


@interface ServiceFee (SWIFT_EXTENSION(UberRides))
@end



/// <ul><li>Contains information regarding the ETA of an Uber product.</li></ul>
SWIFT_CLASS_NAMED("TimeEstimate")
@interface UBSDKTimeEstimate : NSObject

/// Unique identifier representing a specific product for a given latitude & longitude.
@property (nonatomic, readonly, copy) NSString * _Nullable productID;

/// Display name of product. Ex: "UberBLACK".
@property (nonatomic, readonly, copy) NSString * _Nullable name;

/// ETA for the product (in seconds).
@property (nonatomic, readonly) NSInteger estimate;
@end


@interface UBSDKTimeEstimate (SWIFT_EXTENSION(UberRides))
@end



/// Manager class for saving and deleting AccessTokens. Allows you to manage tokens based on token identifier & keychain access group
SWIFT_CLASS_NAMED("TokenManager")
@interface UBSDKTokenManager : NSObject
+ (NSString * _Nonnull)TokenManagerDidSaveTokenNotification;
+ (NSString * _Nonnull)TokenManagerDidDeleteTokenNotification;

/// Gets the AccessToken for the given tokenIdentifier and accessGroup.
///
/// \param tokenIdentifier The token identifier string to use
///
/// \param accessGroup The keychain access group to use
///
/// \returns  An AccessToken, or nil if one wasn't found
+ (UBSDKAccessToken * _Nullable)fetchToken:(NSString * _Nonnull)tokenIdentifier accessGroup:(NSString * _Nonnull)accessGroup;

/// Gets the AccessToken for the given tokenIdentifier. Uses the default value for keychain access group, as defined by your Configuration.
///
/// \param tokenIdentifier The token identifier string to use
///
/// \returns  An AccessToken, or nil if one wasn't found
+ (UBSDKAccessToken * _Nullable)fetchToken:(NSString * _Nonnull)tokenIdentifier;

/// Gets the AccessToken using the default tokenIdentifier and accessGroup. These values are the defined in your Configuration
///
/// \returns  An AccessToken, or nil if one wasn't found
+ (UBSDKAccessToken * _Nullable)fetchToken;

/// Saves the given AccessToken using the provided tokenIdentifier and acessGroup.If no values are supplied, it uses the defaults defined in your Configuration.
///
/// Access Token is saved syncronously
///
/// \param accessToken The AccessToken to save
///
/// \param tokenIdentifier The token identifier string to use (defaults to Configuration.getDefaultAccessTokenIdentifier())
///
/// \param accessGroup The keychain access group to use (defaults to Configuration.getDefaultKeychainAccessGroup())
///
/// \returns  true if the accessToken was saved successfully, false otherwise
+ (BOOL)saveToken:(UBSDKAccessToken * _Nonnull)accessToken tokenIdentifier:(NSString * _Nonnull)tokenIdentifier accessGroup:(NSString * _Nonnull)accessGroup;

/// Saves the given AccessToken using the provided tokenIdentifier. Uses the default keychain access group defined by your Configuration.
///
/// Access Token is saved syncronously
///
/// \param accessToken The AccessToken to save
///
/// \param tokenIdentifier The token identifier string to use
///
/// \returns  true if the accessToken was saved successfully, false otherwise
+ (BOOL)saveToken:(UBSDKAccessToken * _Nonnull)accessToken tokenIdentifier:(NSString * _Nonnull)tokenIdentifier;

/// Saves the given AccessToken. Uses the default access token identifier & keychain access group defined by your Configuration.
///
/// Access Token is saved syncronously
///
/// \param accessToken The AccessToken to save
///
/// \returns  true if the accessToken was saved successfully, false otherwise
+ (BOOL)saveToken:(UBSDKAccessToken * _Nonnull)accessToken;

/// Deletes the AccessToken for the givent tokenIdentifier and accessGroup. If no values are supplied, it uses the defaults defined in your Configuration.
///
/// \param tokenIdentifier The token identifier string to use (defaults to Configuration.getDefaultAccessTokenIdentifier())
///
/// \param accessGroup The keychain access group to use (defaults to Configuration.getDefaultKeychainAccessGroup())
///
/// \returns  true if the token was deleted, false otherwise
+ (BOOL)deleteToken:(NSString * _Nonnull)tokenIdentifier accessGroup:(NSString * _Nonnull)accessGroup;

/// Deletes the AccessToken for the given tokenIdentifier. Uses the default keychain access group defined in your Configuration.
///
/// \param tokenIdentifier The token identifier string to use
///
/// \returns  true if the token was deleted, false otherwise
+ (BOOL)deleteToken:(NSString * _Nonnull)tokenIdentifier;

/// Deletes an AccessToken. Uses the default token identifier defined in your Configuration. Uses the default keychain access group defined in your Configuration.
///
/// \returns  true if the token was deleted, false otherwise
+ (BOOL)deleteToken;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// <ul><li>Information relating to a city in a trip activity.</li></ul>
SWIFT_CLASS_NAMED("TripCity")
@interface UBSDKTripCity : NSObject

/// Latitude of city location.
@property (nonatomic, readonly) float latitude;

/// Longitude of city location.
@property (nonatomic, readonly) float longitude;

/// Display name of city.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@end


@interface UBSDKTripCity (SWIFT_EXTENSION(UberRides))
@end

@class UBSDKUserActivity;


/// <ul><li>User's lifetime trip activity with Uber.</li></ul>
SWIFT_CLASS_NAMED("TripHistory")
@interface UBSDKTripHistory : NSObject

/// Position in pagination.
@property (nonatomic, readonly) NSInteger offset;

/// Number of items retrieved.
@property (nonatomic, readonly) NSInteger limit;

/// Total number of items available.
@property (nonatomic, readonly) NSInteger count;

/// Array of trip information.
@property (nonatomic, readonly, copy) NSArray<UBSDKUserActivity *> * _Nullable history;
@end


@interface UBSDKTripHistory (SWIFT_EXTENSION(UberRides))
@end




/// <ul><li>Contains information for a single Uber product.</li></ul>
SWIFT_CLASS_NAMED("UberProduct")
@interface UBSDKUberProduct : NSObject

/// Unique identifier representing a specific product for a given latitude & longitude.
@property (nonatomic, readonly, copy) NSString * _Nullable productID;

/// Display name of product. Ex: "UberBLACK".
@property (nonatomic, readonly, copy) NSString * _Nullable name;

/// Description of product. Ex: "The original Uber".
@property (nonatomic, readonly, copy) NSString * _Nullable details;

/// Capacity of product. Ex: 4, for a product that fits 4.
@property (nonatomic, readonly) NSInteger capacity;

/// Path of image URL representing the product.
@property (nonatomic, readonly, copy) NSString * _Nullable imagePath;

/// The basic price details. See PriceDetails for structure.
@property (nonatomic, readonly, strong) UBSDKPriceDetails * _Nullable priceDetails;
@end


@interface UBSDKUberProduct (SWIFT_EXTENSION(UberRides))
@end



/// <ul><li>Information regarding an Uber trip in a user's activity history.</li></ul>
SWIFT_CLASS_NAMED("UserActivity")
@interface UBSDKUserActivity : NSObject

/// Length of activity in miles.
@property (nonatomic, readonly) float distance;

/// Represents timestamp of activity request time in current locale.
@property (nonatomic, readonly, strong) NSDate * _Nullable requestTime;

/// Represents timestamp of activity start time in current locale.
@property (nonatomic, readonly, strong) NSDate * _Nullable startTime;

/// Represents timestamp of activity end time in current locale.
@property (nonatomic, readonly, strong) NSDate * _Nullable endTime;

/// City that activity started in.
@property (nonatomic, readonly, strong) UBSDKTripCity * _Nullable startCity;

/// Unique activity identifier.
@property (nonatomic, readonly, copy) NSString * _Nullable requestID;

/// Unique identifier representing a specific product for a given latitude & longitude.
@property (nonatomic, readonly, copy) NSString * _Nullable productID;
@end


@interface UBSDKUserActivity (SWIFT_EXTENSION(UberRides))
@end



/// <ul><li>Information regarding an Uber user.</li></ul>
SWIFT_CLASS_NAMED("UserProfile")
@interface UBSDKUserProfile : NSObject

/// First name of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;

/// Last name of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;

/// Email address of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable email;

/// Image URL of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable picturePath;

/// Promo code of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable promoCode;

/// Unique identifier of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable UUID;
@end


@interface UBSDKUserProfile (SWIFT_EXTENSION(UberRides))
@end



/// Contains information for an Uber driver's car.
SWIFT_CLASS_NAMED("Vehicle")
@interface UBSDKVehicle : NSObject

/// The license plate number of the vehicle.
@property (nonatomic, readonly, copy) NSString * _Nullable licensePlate;

/// The vehicle make or brand.
@property (nonatomic, readonly, copy) NSString * _Nullable make;

/// The vehicle model or type.
@property (nonatomic, readonly, copy) NSString * _Nullable model;

/// The URL to a stock photo of the vehicle (may be null).
@property (nonatomic, readonly, copy) NSString * _Nullable pictureURL;
@end


@interface UBSDKVehicle (SWIFT_EXTENSION(UberRides))
@end

#pragma clang diagnostic pop
